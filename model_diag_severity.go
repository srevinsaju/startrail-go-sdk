/*
startrail-service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package startrail

import (
	"encoding/json"
	"fmt"
)

// DiagSeverity the model 'DiagSeverity'
type DiagSeverity string

// List of DiagSeverity
const (
	INFO DiagSeverity = "Info"
	WARNING DiagSeverity = "Warning"
	ERROR DiagSeverity = "Error"
)

// All allowed values of DiagSeverity enum
var AllowedDiagSeverityEnumValues = []DiagSeverity{
	"Info",
	"Warning",
	"Error",
}

func (v *DiagSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiagSeverity(value)
	for _, existing := range AllowedDiagSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiagSeverity", value)
}

// NewDiagSeverityFromValue returns a pointer to a valid DiagSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiagSeverityFromValue(v string) (*DiagSeverity, error) {
	ev := DiagSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiagSeverity: valid values are %v", v, AllowedDiagSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiagSeverity) IsValid() bool {
	for _, existing := range AllowedDiagSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiagSeverity value
func (v DiagSeverity) Ptr() *DiagSeverity {
	return &v
}

type NullableDiagSeverity struct {
	value *DiagSeverity
	isSet bool
}

func (v NullableDiagSeverity) Get() *DiagSeverity {
	return v.value
}

func (v *NullableDiagSeverity) Set(val *DiagSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagSeverity(val *DiagSeverity) *NullableDiagSeverity {
	return &NullableDiagSeverity{value: val, isSet: true}
}

func (v NullableDiagSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

