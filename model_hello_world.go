/*
startrail-service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HelloWorld type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelloWorld{}

// HelloWorld struct for HelloWorld
type HelloWorld struct {
	Tagline string `json:"tagline"`
	Version Version `json:"version"`
}

type _HelloWorld HelloWorld

// NewHelloWorld instantiates a new HelloWorld object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelloWorld(tagline string, version Version) *HelloWorld {
	this := HelloWorld{}
	this.Tagline = tagline
	this.Version = version
	return &this
}

// NewHelloWorldWithDefaults instantiates a new HelloWorld object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelloWorldWithDefaults() *HelloWorld {
	this := HelloWorld{}
	return &this
}

// GetTagline returns the Tagline field value
func (o *HelloWorld) GetTagline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tagline
}

// GetTaglineOk returns a tuple with the Tagline field value
// and a boolean to check if the value has been set.
func (o *HelloWorld) GetTaglineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagline, true
}

// SetTagline sets field value
func (o *HelloWorld) SetTagline(v string) {
	o.Tagline = v
}

// GetVersion returns the Version field value
func (o *HelloWorld) GetVersion() Version {
	if o == nil {
		var ret Version
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HelloWorld) GetVersionOk() (*Version, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HelloWorld) SetVersion(v Version) {
	o.Version = v
}

func (o HelloWorld) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelloWorld) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagline"] = o.Tagline
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *HelloWorld) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagline",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelloWorld := _HelloWorld{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHelloWorld)

	if err != nil {
		return err
	}

	*o = HelloWorld(varHelloWorld)

	return err
}

type NullableHelloWorld struct {
	value *HelloWorld
	isSet bool
}

func (v NullableHelloWorld) Get() *HelloWorld {
	return v.value
}

func (v *NullableHelloWorld) Set(val *HelloWorld) {
	v.value = val
	v.isSet = true
}

func (v NullableHelloWorld) IsSet() bool {
	return v.isSet
}

func (v *NullableHelloWorld) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelloWorld(val *HelloWorld) *NullableHelloWorld {
	return &NullableHelloWorld{value: val, isSet: true}
}

func (v NullableHelloWorld) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelloWorld) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


