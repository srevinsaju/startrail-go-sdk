/*
startrail-service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Diagnostic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Diagnostic{}

// Diagnostic struct for Diagnostic
type Diagnostic struct {
	Context string `json:"context"`
	Detail string `json:"detail"`
	Severity DiagSeverity `json:"severity"`
	Summary string `json:"summary"`
}

type _Diagnostic Diagnostic

// NewDiagnostic instantiates a new Diagnostic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnostic(context string, detail string, severity DiagSeverity, summary string) *Diagnostic {
	this := Diagnostic{}
	this.Context = context
	this.Detail = detail
	this.Severity = severity
	this.Summary = summary
	return &this
}

// NewDiagnosticWithDefaults instantiates a new Diagnostic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticWithDefaults() *Diagnostic {
	this := Diagnostic{}
	return &this
}

// GetContext returns the Context field value
func (o *Diagnostic) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Diagnostic) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Diagnostic) SetContext(v string) {
	o.Context = v
}

// GetDetail returns the Detail field value
func (o *Diagnostic) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *Diagnostic) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *Diagnostic) SetDetail(v string) {
	o.Detail = v
}

// GetSeverity returns the Severity field value
func (o *Diagnostic) GetSeverity() DiagSeverity {
	if o == nil {
		var ret DiagSeverity
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *Diagnostic) GetSeverityOk() (*DiagSeverity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *Diagnostic) SetSeverity(v DiagSeverity) {
	o.Severity = v
}

// GetSummary returns the Summary field value
func (o *Diagnostic) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Diagnostic) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Diagnostic) SetSummary(v string) {
	o.Summary = v
}

func (o Diagnostic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Diagnostic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["detail"] = o.Detail
	toSerialize["severity"] = o.Severity
	toSerialize["summary"] = o.Summary
	return toSerialize, nil
}

func (o *Diagnostic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"detail",
		"severity",
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiagnostic := _Diagnostic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiagnostic)

	if err != nil {
		return err
	}

	*o = Diagnostic(varDiagnostic)

	return err
}

type NullableDiagnostic struct {
	value *Diagnostic
	isSet bool
}

func (v NullableDiagnostic) Get() *Diagnostic {
	return v.value
}

func (v *NullableDiagnostic) Set(val *Diagnostic) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnostic) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnostic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnostic(val *Diagnostic) *NullableDiagnostic {
	return &NullableDiagnostic{value: val, isSet: true}
}

func (v NullableDiagnostic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnostic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


